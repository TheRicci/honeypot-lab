load_module modules/ngx_http_modsecurity_module.so;
load_module modules/ngx_stream_module.so;

worker_processes  1;

error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    resolver 127.0.0.11 valid=30s;
    log_format  main  '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent"';

    # -- ModSecurity configuration (detection only) --
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec/modsecurity.conf;
	
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       443 ssl;
        server_name _;   # accept any hostname

        # --- TLS Termination ---
        ssl_certificate     /etc/nginx/cert.pem;
        ssl_certificate_key /etc/nginx/key.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # --- Access & Audit Logs (+ ModSecurity audit) ---
        access_log  /var/log/nginx/access.log  main;
        error_log   /var/log/nginx/error.log  warn;

        # --- The real honeypot backend ---
        location / {
            proxy_pass         http://honeypot:80/;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # (Optional) redirect HTTP→HTTPS
    server {
        listen      80;
        return      301 https://$host$request_uri/;
    }
}
stream {
    # define a TLS “listener” on the FTPS port (implicit TLS on 990)
    server {
        listen     990 ssl;
        proxy_pass  honeypot:21;    # forward decrypted TCP to Go FTP server
        ssl_certificate     /etc/nginx/cert.pem;
        ssl_certificate_key /etc/nginx/key.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
    }
}

